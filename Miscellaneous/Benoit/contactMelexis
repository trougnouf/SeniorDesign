Status byte after reset: 0?
Does reset count as the first command to set the the mode to SPI?
Would (freq) work?
100mV from MISO


img7: reset -> 100111 (single, RS, D1, D0)
img8: 01001111(r) -> 10010011

img9(?): in receive mode but somehow sending (?). s/r:10010011=err,changing

Should receive 1000x011


69k,31M


// Reset: 11110000 = 0xf0
// Start burst mode: 00011111 = 0x1f

1st result:
compin	uint8_t [9]	0x20000208 <ucHeap+492>	
	compin[0]	uint8_t	35 100011 (Binary)	
	compin[1]	uint8_t	180 10110100 (Binary)	
	compin[2]	uint8_t	233 'é'	
	compin[3]	uint8_t	1 '\001'	
	compin[4]	uint8_t	24 '\030'	
	compin[5]	uint8_t	252 'ü'	
	compin[6]	uint8_t	138 '\212'	
	compin[7]	uint8_t	254 'þ'	
	compin[8]	uint8_t	64 '@'	

2:
compin	uint8_t [9]	100000000000000000001000001000 (Binary)	
	compin[0]	uint8_t	100011 (Binary)	
	compin[1]	uint8_t	10110100 (Binary)	
	compin[2]	uint8_t	11101001 (Binary)	
	compin[3]	uint8_t	1 (Binary)	
	compin[4]	uint8_t	11000 (Binary)	
	compin[5]	uint8_t	11111100 (Binary)	
	compin[6]	uint8_t	10001010 (Binary)	
	compin[7]	uint8_t	11111110 (Binary)	
	compin[8]	uint8_t	1000000 (Binary)	


towards elevator:
argument	const void *	0xa5a5a5a5	
cmdByte	uint8_t	79 'O'	
stByte	uint8_t	35 '#'	
compin	uint8_t [9]	0x20000208 <ucHeap+492>	
	compin[0]	uint8_t	3 '\003'	
	compin[1]	uint8_t	180 '´'	
	compin[2]	uint8_t	123 '{'	
	compin[3]	uint8_t	1 '\001'	
	compin[4]	uint8_t	222 'Þ'	
	compin[5]	uint8_t	253 'ý'	
	compin[6]	uint8_t	48 '0'	
	compin[7]	uint8_t	254 'þ'	

towards free table: (north?)
argument	const void *	0xa5a5a5a5	
cmdByte	uint8_t	79 'O'	
stByte	uint8_t	35 '#'	
compin	uint8_t [9]	0x20000208 <ucHeap+492>	
	compin[0]	uint8_t	3 '\003'	
	compin[1]	uint8_t	180 '´'	
	compin[2]	uint8_t	143 '\217'	
	compin[3]	uint8_t	1 '\001'	
	compin[4]	uint8_t	120 'x'	
	compin[5]	uint8_t	252 'ü'	
	compin[6]	uint8_t	142 '\216'	
	compin[7]	uint8_t	254 'þ'	
	compin[8]	uint8_t	78 'N'	

towards lockers:
argument	const void *	0xa5a5a5a5	
cmdByte	uint8_t	79 'O'	
stByte	uint8_t	35 '#'	
compin	uint8_t [9]	0x20000208 <ucHeap+492>	
	compin[0]	uint8_t	3 '\003'	
	compin[1]	uint8_t	180 '´'	
	compin[2]	uint8_t	137 '\211'	
	compin[3]	uint8_t	2 '\002'	
	compin[4]	uint8_t	24 '\030'	
	compin[5]	uint8_t	251 'û'	
	compin[6]	uint8_t	181 'µ'	
	compin[7]	uint8_t	254 'þ'	
	compin[8]	uint8_t	98 'b'	

towards radioroom:
argument	const void *	0xa5a5a5a5	
cmdByte	uint8_t	79 'O'	
stByte	uint8_t	35 '#'	
compin	uint8_t [9]	0x20000208 <ucHeap+492>	
	compin[0]	uint8_t	3 '\003'	
	compin[1]	uint8_t	180 '´'	
	compin[2]	uint8_t	150 '\226'	
	compin[3]	uint8_t	2 '\002'	
	compin[4]	uint8_t	237 'í'	
	compin[5]	uint8_t	252 'ü'	
	compin[6]	uint8_t	81 'Q'	
	compin[7]	uint8_t	254 'þ'	
	compin[8]	uint8_t	114 'r'	

1st bit is useless
2-3 are temp, taken off in the future.
180 143  10110100 10001111  46223?
180 137  10110100 10001001  46217?
180 150  10110100 10010110  46230?
46244 = 25 C
45.2/degree?
25−(46244−46223)÷45.2 = 24.5354

4-5 X
1 222	1  11011110	478
1 120	1  01111000	376
2 24	10 00011000	536
2 237	10 11101101	749



pointing north:	
	compin[1]	uint8_t	231 'ç'	
	compin[2]	uint8_t	241 'ñ'	
	
	compin[3]	uint8_t	1 '\001'	
	compin[4]	uint8_t	214 'Ö'	
	
	compin[5]	uint8_t	252 'ü'	
	compin[6]	uint8_t	190 '¾'	

231 241 = 11100111 11110001 = 59377 x
1 214 = 1 11010110 = 470 y
252 190 = 11111100 10111110 = 64702 z


pointing upnorth:	
	compin[1]	uint8_t	231 'ç'	
	compin[2]	uint8_t	241 'ñ'	
	
	compin[3]	uint8_t	1 '\001'	
	compin[4]	uint8_t	125 '}'	
	
	compin[5]	uint8_t	252 'ü'	
	compin[6]	uint8_t	241 'ñ'	

S:
	compin[1]	uint8_t	231 'ç'	
	compin[2]	uint8_t	241 'ñ'	
	
	compin[3]	uint8_t	2 '\002'	
	compin[4]	uint8_t	137 '\211'
		
	compin[5]	uint8_t	252 'ü'	
	compin[6]	uint8_t	181 'µ'	
	
north again:	
	compin[1]	uint8_t	181 'µ'	
	compin[2]	uint8_t	9 '\t'	
	
	compin[3]	uint8_t	1 '\001'	
	compin[4]	uint8_t	216 'Ø'	
	
	compin[5]	uint8_t	252 'ü'	
	compin[6]	uint8_t	136 '\210'	

181 9=10110101 00001001-> neg => 13577-2^15 = -19191
1 216 = 1 11011000 = 472
x<0
	pi-atan(y/x) = 4.55 (gnome calc) or 3.166(wa)=181.4d
	
	
S

	compin[1]	uint8_t	231 'ç'	
	compin[2]	uint8_t	240 'ð'	
	compin[3]	uint8_t	2 '\002'	
	compin[4]	uint8_t	242 'ò'	
	compin[5]	uint8_t	252 'ü'	
	compin[6]	uint8_t	246 'ö'	

110011111110000-2^15 = -6160
1011110010 = 754
PI-ATAN(Y/X)=		3.2633 = 186d :\ (WA)
			86.16 (GC)





http://wiring.org.co/learning/basics/magneticfield.html

float readAxis(int axis)
{
  // send eight bits, wait until the data is ready then receive 16 bits

  // pulse the reset
  digitalWrite(RESETpin, LOW);
  delay(2);
  digitalWrite(RESETpin, HIGH);
  delay(2);
  digitalWrite(RESETpin, LOW);
  delay(2);

  // send the command byte
  // set the time to read the magnetic sensors (ASIC period) as /2048
  sendBit(LOW);
  sendBit(HIGH);
  sendBit(HIGH);
  sendBit(LOW);
  sendBit(LOW);
  sendBit(LOW);

  // the last two bits select the axis
  if (axis == 0)  // x axis
  {
    sendBit(LOW);
    sendBit(HIGH);
  }
  else if (axis == 1)  // y axis
  {
    sendBit(HIGH);
    sendBit(LOW);
  }
  else  // z axis
  {
    sendBit(HIGH);
    sendBit(HIGH);
  }

  // wait until the DRDY line is high
  while (digitalRead(DRDYpin) == LOW)
  {
  }

  long total = 0;

  // receive result
  // the leftmost bit mark the number as positive or negative
  long sign = receiveBit();

  // the remaining bits are converted to an integer
  for (int i = 14; i >= 0; i = i - 1)
  {
    long thisbit = receiveBit();
    thisbit = thisbit << i;
    total = total | thisbit;
  }

  if (sign == 1)
  {
    total = total - 32768;
  }

  // set and return the appropriate variable
  if (axis == 0)
  {
    x = total;
  }
  else if (axis == 1)
  {
    y = total;
  }
  else
  {
    z = total;
  }
  return total;
}

int getHeading(float x, float y, float z)
{
  float heading = 0;
  if ((x == 0) && (y < 0))
    heading = PI / 2.0;
  if ((x == 0) && (y > 0))
    heading = 3.0 * PI / 2.0;
  if (x < 0)
    heading = PI - atan(y / x);
  if ((x > 0) && (y < 0))
    heading = -atan(y / x);
  if ((x > 0) && (y > 0))
    heading = 2.0 * PI - atan(y / x);
  return  int(degrees(heading));
}
